How many times did you refresh the page when wating for large content to be loaded. 
If you are the same type of person as I am then you are doing this often.  
But, have you ever thought about what happens under the hood when user refresh the page? 
Today I will try to explain a little bit more about how we can optimize use of server resources with CancellationToken in such scenarios.

-> Cancellations and time consuming requests.

//new

Cancellation Tokens in Asp.Net Core - small yet powerfull thing used for cancellations 

In this post we'll try to learn how to use cancellationToken by example in ASP.NET Core.
By using CancellationTokens we can stop execution of long running requests when user stops or refresh their request from browsers (or other clients). 

I'm not going to dive into how async, await, Task, CancellationToken works under the hood but rather how to benefit from using this feature.
We'll also take a look how we can inject CancellationToken into a MVC action method and catch cancelled requests.